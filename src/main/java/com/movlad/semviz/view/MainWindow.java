/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.movlad.semviz.view;

import com.movlad.semviz.application.GraphicsController;
import com.movlad.semviz.application.SemvizManagerController;
import com.movlad.semviz.core.SemvizException;
import java.awt.BorderLayout;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.apache.jena.query.QueryException;
import org.apache.jena.query.QuerySolution;

/**
 *
 * @author Vlad
 */
public class MainWindow extends javax.swing.JFrame implements Observer {
    
    private SemvizManagerController svmgrController;
    private GraphicsController gc;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        
        svmgrController = SemvizManagerController.get();
        
        svmgrController.addObserver(this);
        
        gc = GraphicsController.get();
        
        gc.init(panel_GLCanvas.getWidth(), panel_GLCanvas.getHeight(), 0.1f, 1000.0f);
        gc.addObserver(this);
        
        panel_GLCanvas.add(gc.getCanvas(), BorderLayout.CENTER);
        
        updateCloudInfoTable();
        updateCloudURIList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textField_Command = new javax.swing.JTextField();
        panel_GLCanvas = new javax.swing.JPanel();
        panel_Control = new javax.swing.JPanel();
        label_CloudList = new java.awt.Label();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_CloudInfo = new javax.swing.JTable();
        label_CloudInfoTable = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_CloudURI = new javax.swing.JList<>();
        menuBar = new javax.swing.JMenuBar();
        menu_File = new javax.swing.JMenu();
        menuItem_Open = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textField_Command.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textField_CommandKeyPressed(evt);
            }
        });

        panel_GLCanvas.setBackground(new java.awt.Color(0, 0, 0));
        panel_GLCanvas.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                panel_GLCanvasComponentResized(evt);
            }
        });

        javax.swing.GroupLayout panel_GLCanvasLayout = new javax.swing.GroupLayout(panel_GLCanvas);
        panel_GLCanvas.setLayout(panel_GLCanvasLayout);
        panel_GLCanvasLayout.setHorizontalGroup(
            panel_GLCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 664, Short.MAX_VALUE)
        );
        panel_GLCanvasLayout.setVerticalGroup(
            panel_GLCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        label_CloudList.setText("Cloud List");

        table_CloudInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table_CloudInfo);

        label_CloudInfoTable.setText("Queried Info");

        list_CloudURI.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        list_CloudURI.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                list_CloudURIValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(list_CloudURI);

        javax.swing.GroupLayout panel_ControlLayout = new javax.swing.GroupLayout(panel_Control);
        panel_Control.setLayout(panel_ControlLayout);
        panel_ControlLayout.setHorizontalGroup(
            panel_ControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_ControlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_ControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(panel_ControlLayout.createSequentialGroup()
                        .addGroup(panel_ControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_CloudList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label_CloudInfoTable))
                        .addGap(0, 194, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panel_ControlLayout.setVerticalGroup(
            panel_ControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_ControlLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(label_CloudList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_CloudInfoTable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(308, Short.MAX_VALUE))
        );

        menu_File.setText("File");

        menuItem_Open.setText("Open");
        menuItem_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_OpenActionPerformed(evt);
            }
        });
        menu_File.add(menuItem_Open);

        menuBar.add(menu_File);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textField_Command)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_Control, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panel_GLCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_GLCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_Control, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addComponent(textField_Command, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItem_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_OpenActionPerformed
        final JFileChooser fc = new JFileChooser();
        
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int returnVal = fc.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String path = fc.getSelectedFile().getAbsolutePath();
            
            try {
                svmgrController.load(path);
            } catch (SemvizException e) {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } catch (IOException ioe) {
                JOptionPane.showMessageDialog(this, "File could not be loaded.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuItem_OpenActionPerformed

    private void textField_CommandKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textField_CommandKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            String queryString = textField_Command.getText();
            
            try {
                svmgrController.query(queryString);
            } catch (SemvizException e) {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } catch (QueryException qe) {
                JOptionPane.showMessageDialog(this, "Invalid query syntax.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            
            textField_Command.setText("");
        }
    }//GEN-LAST:event_textField_CommandKeyPressed

    private void list_CloudURIValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_list_CloudURIValueChanged
        updateCloudInfoTable();
    }//GEN-LAST:event_list_CloudURIValueChanged

    private void panel_GLCanvasComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_panel_GLCanvasComponentResized
        gc.getCanvas().setSize(panel_GLCanvas.getWidth(), panel_GLCanvas.getHeight());
    }//GEN-LAST:event_panel_GLCanvasComponentResized

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label_CloudInfoTable;
    private java.awt.Label label_CloudList;
    private javax.swing.JList<String> list_CloudURI;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuItem_Open;
    private javax.swing.JMenu menu_File;
    private javax.swing.JPanel panel_Control;
    private javax.swing.JPanel panel_GLCanvas;
    private javax.swing.JTable table_CloudInfo;
    private javax.swing.JTextField textField_Command;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        updateCloudURIList();
    }
    
    private void updateCloudURIList() {
        list_CloudURI.removeAll();
        
        Vector<String> uris = new Vector<>();
        
        if (svmgrController.getCloudSelection() != null) {
            for (QuerySolution querySolution : svmgrController.getCloudSelection()) {
                uris.add(querySolution.get("?cloud").asResource().getLocalName());
            }   
        }
        
        list_CloudURI.setListData(uris);
    }
    
    private void updateCloudInfoTable() {
        DefaultTableModel tableModel = new DefaultTableModel();
        
        if (!list_CloudURI.isSelectionEmpty()) {
            String cloudURI = list_CloudURI.getSelectedValue();
            
            for (QuerySolution querySolution : svmgrController.getCloudSelection()) {
                if (cloudURI.equals(querySolution.getResource("?cloud").getLocalName())) {
                    Iterator<String> varNameIt = querySolution.varNames();
                
                    while (varNameIt.hasNext()) {
                        String varName = varNameIt.next();
                        
                        if (!varName.equals("cloud")) {
                            String varValue;

                            if (querySolution.get(varName).isResource()) {
                                varValue = querySolution.getResource(varName).getLocalName();
                            } else {
                                varValue = querySolution.getLiteral(varName).getValue().toString();
                            }

                            String[] data = new String[1];

                            data[0] = varValue;
                        
                            tableModel.addColumn(varName, data);
                        }
                    }
                }
            }
            
            table_CloudInfo.setVisible(true);
        } else {
            table_CloudInfo.setVisible(false);
        }
        
        table_CloudInfo.setModel(tableModel);
    }
    
}
